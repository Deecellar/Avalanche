const Position = @import("../board/position.zig");
const Piece = @import("../board/piece.zig");

// Hand-Crafted Evaluation

pub const PieceValues: [12]i16 = .{
    85, // P
    370, // N
    390, // B
    590, // R
    1100, // Q
    0, // K
    -85, // p
    -370, // n
    -390, // b
    -590, // r
    -1100, // q
    -0, // k
};

// ^ 56 for black
// zig fmt: off
pub const PSQT: [6][64]i16 = .{
    // Pawn
    .{
        000, 000, 000, 000, 000, 000, 000, 000,
        150, 120, 120, 130, 130, 120, 120, 150,
        090, 060, 060, 070, 070, 060, 050, 090,
        012, 010, 015, 035, 032, -05, 005, 012,
        004, 003, 011, 020, 020, 008, -08, 003,
        005, 015, -02, 008, 008, -06, 013, 005,
        004, 005, 007, -09, -09, 010, 006, 004,
        000, 000, 000, 000, 000, 000, 000, 000,
    },
    // Knight
    .{
        -50, -40, -30, -30, -30, -30, -40, -50,
        -40, -20, 000, 000, 000, 000, -20, -40,
        -30, 000, 010, 015, 015, 010, 000, -30,
        -30, 000, 015, 020, 020, 015, 000, -30,
        -30, 000, 015, 017, 017, 015, 000, -30,
        -30, -20, 008, 015, 015, 010, -20, -30,
        -40, -20, 000, 000, 000, 000, -20, -40,
        -50, -40, -30, -30, -30, -30, -40, -50,
    },
    // Bishop
    .{
        -20, -10, -10, -10, -10, -10, -10, -20,
        -10, 000, 000, 000, 000, 000, 000, -10,
        -10, 000, 005, 010, 010, 005, 000, -10,
        -10, 005, 005, 010, 010, 005, 005, -10,
        -10, 000, 015, 010, 010, 015, 000, -10,
        -10, 010, 010, 010, 010, 010, 010, -10,
        -10, 015, 000, 000, 000, 000, 015, -10,
        -20, -10, -10, -10, -10, -10, -10, -20,
    },
    // Rook
    .{
        0,   0,  0,  3,  3,  0,  0,  0,
        5,  10, 14, 14, 14, 14, 10,  5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
        -5,  0,  0,  0,  0,  0,  0, -5,
         0,  0,  0,  7,  7,  0,  0,  0,
    },
    // Queen
    .{
        -20, -10, -10, -3, -3, -10, -10, -20,
        -10, 000, 000, 000, 000, 000, 000, -10,
        -10, 000, 005, 010, 010, 005, 000, -10,
        -01, 005, 005, 010, 010, 005, 005, -02,
        002, 000, 010, 010, 010, 010, 000, 000,
        -10, 010, 012, 010, 010, 010, 010, -10,
        -10, 005, 000, 000, 000, 000, 005, -10,
        -20, -10, -10, -1, -3, -10, -10, -20,
    },
    // King
    .{
        -10, 000, -05, -10, -10, -05, 000, -10,
        -03, 000, -05, -10, -10, -05, 000, -03,
        -05, 000, -10, -20, -20, -10, 000, -05,
        -05, -05, -10, -20, -20, -10, -05, -05,
        -05, -05, -10, -20, -20, -10, -05, -05,
        -05, -05, -10, -20, -20, -10, -05, -05,
        -05, -05, -10, -10, -08, -04, -05, -05,
        001, 012, 010, 000, 000, 004, 010, 003,
    }
};

// zig fmt: on

pub fn evaluate(position: *Position.Position) i16 {
    var score: i16 = 0;
    for (position.mailbox) |p, i| {
        if (p == null) {
            continue;
        }
        score += PieceValues[@enumToInt(p.?)];
        if (p.?.color() == Piece.Color.White) {
            score += PSQT[@enumToInt(p.?) % 6][i];
        } else {
            score -= PSQT[@enumToInt(p.?) % 6][i ^ 56];
        }
    }

    return score;
}
